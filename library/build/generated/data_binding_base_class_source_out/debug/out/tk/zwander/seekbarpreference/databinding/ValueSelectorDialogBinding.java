// Generated by view binder compiler. Do not edit!
package tk.zwander.seekbarpreference.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import tk.zwander.seekbarpreference.R;

public final class ValueSelectorDialogBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final MaterialButton btnApply;

  @NonNull
  public final MaterialButton btnCancel;

  @NonNull
  public final EditText customValue;

  @NonNull
  public final LinearLayout dialogColorArea;

  @NonNull
  public final ImageView dialogIcon;

  @NonNull
  public final TextView dialogTitle;

  @NonNull
  public final TextView maxValue;

  @NonNull
  public final TextView minValue;

  private ValueSelectorDialogBinding(@NonNull LinearLayout rootView,
      @NonNull MaterialButton btnApply, @NonNull MaterialButton btnCancel,
      @NonNull EditText customValue, @NonNull LinearLayout dialogColorArea,
      @NonNull ImageView dialogIcon, @NonNull TextView dialogTitle, @NonNull TextView maxValue,
      @NonNull TextView minValue) {
    this.rootView = rootView;
    this.btnApply = btnApply;
    this.btnCancel = btnCancel;
    this.customValue = customValue;
    this.dialogColorArea = dialogColorArea;
    this.dialogIcon = dialogIcon;
    this.dialogTitle = dialogTitle;
    this.maxValue = maxValue;
    this.minValue = minValue;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ValueSelectorDialogBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ValueSelectorDialogBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.value_selector_dialog, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ValueSelectorDialogBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_apply;
      MaterialButton btnApply = ViewBindings.findChildViewById(rootView, id);
      if (btnApply == null) {
        break missingId;
      }

      id = R.id.btn_cancel;
      MaterialButton btnCancel = ViewBindings.findChildViewById(rootView, id);
      if (btnCancel == null) {
        break missingId;
      }

      id = R.id.customValue;
      EditText customValue = ViewBindings.findChildViewById(rootView, id);
      if (customValue == null) {
        break missingId;
      }

      id = R.id.dialog_color_area;
      LinearLayout dialogColorArea = ViewBindings.findChildViewById(rootView, id);
      if (dialogColorArea == null) {
        break missingId;
      }

      id = R.id.dialog_icon;
      ImageView dialogIcon = ViewBindings.findChildViewById(rootView, id);
      if (dialogIcon == null) {
        break missingId;
      }

      id = R.id.dialog_title;
      TextView dialogTitle = ViewBindings.findChildViewById(rootView, id);
      if (dialogTitle == null) {
        break missingId;
      }

      id = R.id.maxValue;
      TextView maxValue = ViewBindings.findChildViewById(rootView, id);
      if (maxValue == null) {
        break missingId;
      }

      id = R.id.minValue;
      TextView minValue = ViewBindings.findChildViewById(rootView, id);
      if (minValue == null) {
        break missingId;
      }

      return new ValueSelectorDialogBinding((LinearLayout) rootView, btnApply, btnCancel,
          customValue, dialogColorArea, dialogIcon, dialogTitle, maxValue, minValue);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
